class CustomArtPlayer {
    constructor(config) {
        this.config = config;
        this.init();
    }

    init() {
        this.createPlayer();
        this.addControls();
        this.attachEvents();
    }

    createPlayer() {
        const { container, url, poster } = this.config;

        const playerContainer = document.querySelector(container);
        playerContainer.classList.add('custom-artplayer');

        // Video element
        this.video = document.createElement('video');
        this.video.src = url;
        this.video.poster = poster;
        this.video.controls = false; // Custom controls will be added
        playerContainer.appendChild(this.video);
    }

    addControls() {
        const controls = document.createElement('div');
        controls.className = 'controls';

        // Play/Pause button
        this.playPauseBtn = document.createElement('button');
        this.playPauseBtn.className = 'play-pause';
        this.playPauseBtn.textContent = 'Play';
        controls.appendChild(this.playPauseBtn);

        // Progress bar
        this.progress = document.createElement('input');
        this.progress.type = 'range';
        this.progress.className = 'progress';
        this.progress.value = 0;
        this.progress.min = 0;
        this.progress.max = 100;
        controls.appendChild(this.progress);

        // Volume control
        this.volume = document.createElement('input');
        this.volume.type = 'range';
        this.volume.className = 'volume';
        this.volume.value = 50;
        this.volume.min = 0;
        this.volume.max = 100;
        controls.appendChild(this.volume);

        this.video.parentElement.appendChild(controls);
    }

    attachEvents() {
        // Play/Pause button
        this.playPauseBtn.addEventListener('click', () => {
            if (this.video.paused) {
                this.video.play();
                this.playPauseBtn.textContent = 'Pause';
            } else {
                this.video.pause();
                this.playPauseBtn.textContent = 'Play';
            }
        });

        // Update progress bar
        this.video.addEventListener('timeupdate', () => {
            const progressValue = (this.video.currentTime / this.video.duration) * 100;
            this.progress.value = progressValue || 0;
        });

        // Seek video
        this.progress.addEventListener('input', (e) => {
            const seekTime = (e.target.value / 100) * this.video.duration;
            this.video.currentTime = seekTime;
        });

        // Volume control
        this.volume.addEventListener('input', (e) => {
            this.video.volume = e.target.value / 100;
        });
    }
}
